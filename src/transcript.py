import json
import os
import sys
import pytube
import azure.cognitiveservices.speech as speechsdk
from moviepy.editor import VideoFileClip
import time


class Trancsript:

    def __init__(self):
        self.speaker = 1
        self.transcript_output = '../data/transcription.txt'
        self.audio_path = '../data/audio'
        self.get_transcript()

    def get_audio(self, url):
        """
        Downloads audio for youtube video in mp3 format
        :param url: link to youtube video
        :return: None
        """

        try:
            video = pytube.YouTube(url)
            stream = video.streams.filter().first()
            stream.download(filename=f'{self.audio_path}.mp3')
            print("Audio downloaded successfully")

            try:
                audio_clip = VideoFileClip(f'{self.audio_path}.mp3')
                audio_clip.audio.write_audiofile(f'{self.audio_path}.mp3'.replace(".mp3", ".wav"))
                os.remove(f'{self.audio_path}.mp3')
                print("Audio converted to .wav successfully")
            except Exception as e:
                print(f'mp3 to wav convertion error: {e}')

        except Exception as e:
            print(f'audio download error: {e}')

    def write_to_file(self, evt: speechsdk.SpeechRecognitionEventArgs):
        """
        Writes audio transcription generated by azure speach service to transcription.txt file
        :param evt:
        :return: None
        """

        with open(self.transcript_output, 'a') as file:

            spkr = int(evt.result.speaker_id[-1])
            print(spkr)
            if self.speaker != spkr:
                text = '\nLex Fridmann:\n' if spkr in [1, 3] else '\nIlya Sutskever:\n'
                text += f' {evt.result.text}'
                self.speaker = spkr
            else:
                text = f' {evt.result.text}'

            file.write(text)

    def get_transcript(self):
        """
        Creates transcript.txt file from audio file using azure speach service
        :return: None
        """
        current = os.path.dirname(os.path.realpath(__file__))
        parent = os.path.dirname(current)
        sys.path.append(parent)

        with open('../config.json', 'r') as config:
            config = json.load(config)

        video_url = config['video_url']
        azure_api_key = config['azure_api_key']
        azure_region = config['azure_region']

        if not os.path.isfile(f'{self.audio_path}.wav'):
            self.get_audio(video_url)

        with open(self.transcript_output, 'w') as file:
            file.truncate()

        speech_config = speechsdk.SpeechConfig(
            subscription=azure_api_key,
            region=azure_region
        )
        speech_config.speech_recognition_language = "en-US"

        audio_config = speechsdk.AudioConfig(
            filename=f'{self.audio_path}.wav'
        )

        transcriber = speechsdk.transcription.ConversationTranscriber(
            speech_config=speech_config,
            audio_config=audio_config
        )

        transcribing_stop = False
        def stop_cb(evt: speechsdk.SessionEventArgs):
            print('STOPPED on {}'.format(evt.result.error_json))
            nonlocal transcribing_stop
            transcribing_stop = True

        transcriber.transcribed.connect(self.write_to_file)
        transcriber.session_stopped.connect(stop_cb)
        transcriber.canceled.connect(stop_cb)
        transcriber.start_transcribing_async()
        while not transcribing_stop:
            time.sleep(.5)
        transcriber.stop_transcribing_async()


if __name__ == "__main__":
    Trancsript()
